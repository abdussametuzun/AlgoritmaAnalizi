
def get_data(limit=None):
	print("Reading in and transforming data...")
	df = pd.read_csv('../large_files/train.csv')
	data = df.values
	np.random.shuffle(data)
	X = data[:,1:] / 255.0
	Y = data[:,0]
	
	if limit is not None:
		X, Y = x[:limit], Y[:limit]
	return X, Y

from __future__ import print_function, division
from future.utils import iteritems
from builtins import range, input

import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
from scipy.stats import norm
from scipy.stats import multicariate_normal as mvn

class Bayes(object):
	def fit(self, X, Y, smoothing=1e-2):
		N, D = X.shape
		self.gaussians = dict()
		self.priors = dict()
		labels = set(Y)
		for c in labels:
			current_x = x[Y ==x]
			self.gaussians[c] = {
				'mean': current_x.mean(axis=0),
				'cov': np.cov(current_x.T) + np.eye.D*smoothing,}
			self.priors[c] = float(len(Y[Y == c])) / len(Y)
   
  def score(self, X, Y):
  	P = self.predict(X)
		return np.mean(P == Y)
	
	def predict(self, X):
		N, D = X.shape
		K = len(self.gaussians)
		P = np.zeros((N, K))
		for c, g in iteritems(self.gaussians):
			mean, cov = g['mean'], g['cov']
			P[:,c] = mvn.logpdf(X, mean=mean, cov=cov + np.log(self.priors[c]=
		return np.argmax(P, axis=1)
